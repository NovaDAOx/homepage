(self.webpackChunkrugs=self.webpackChunkrugs||[]).push([[905],{20905:function(n,e,i){"use strict";i.r(e),i.d(e,{OpenloginAdapter:function(){return d},getOpenloginDefaultOptions:function(){return p}});var t=i(16304),o=i(36819),r=i(77702),a=i(5587),c=i(91091),s=i(41413),l=i.n(s);const p=(n,e)=>({adapterSettings:{network:o.dr.MAINNET,clientId:"",uxMode:o.$e.POPUP},chainConfig:n?(0,r.h2)(n,e):null,loginSettings:{}});function g(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),i.push.apply(i,t)}return i}function h(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?g(Object(i),!0).forEach(function(e){(0,a.Z)(n,e,i[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):g(Object(i)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))})}return n}class d extends r.J5{constructor(n){var e,i,t;super(),(0,a.Z)(this,"name",r.rW.OPENLOGIN),(0,a.Z)(this,"adapterNamespace",r.yk.MULTICHAIN),(0,a.Z)(this,"type",r.hN.IN_APP),(0,a.Z)(this,"openloginInstance",null),(0,a.Z)(this,"status",r.MP.NOT_READY),(0,a.Z)(this,"currentChainNamespace",r.EN.EIP155),(0,a.Z)(this,"openloginOptions",void 0),(0,a.Z)(this,"loginSettings",{}),(0,a.Z)(this,"privKeyProvider",null),r.cM.debug("const openlogin adapter",n);const c=p(null===(e=n.chainConfig)||void 0===e?void 0:e.chainNamespace,null===(i=n.chainConfig)||void 0===i?void 0:i.chainId);var s;if(this.openloginOptions=h(h({clientId:"",network:o.dr.MAINNET},c.adapterSettings),n.adapterSettings||{}),this.loginSettings=h(h({},c.loginSettings),n.loginSettings),null!==(t=n.chainConfig)&&void 0!==t&&t.chainNamespace&&n.chainConfig.chainNamespace!==r.EN.OTHER&&(this.currentChainNamespace=null===(s=n.chainConfig)||void 0===s?void 0:s.chainNamespace,this.chainConfig=h(h({},c.chainConfig?c.chainConfig:{}),null==n?void 0:n.chainConfig),r.cM.debug("const openlogin chainConfig",this.chainConfig),!this.chainConfig.rpcTarget))throw r.Ty.invalidParams("rpcTarget is required in chainConfig")}get chainConfigProxy(){return this.chainConfig?h({},this.chainConfig):null}get provider(){var n;return(null===(n=this.privKeyProvider)||void 0===n?void 0:n.provider)||null}set provider(n){throw new Error("Not implemented")}init(n){var e=()=>super.checkInitializationRequirements,i=this;return(0,t.Z)(function*(){var t;if(e().call(i),null===(t=i.openloginOptions)||void 0===t||!t.clientId)throw r.Ty.invalidParams("clientId is required before openlogin's initialization");if(!i.chainConfig&&i.currentChainNamespace!==r.EN.OTHER)throw r.Ty.invalidParams("chainConfig is required before initialization");let a=!1;if(i.openloginOptions.uxMode===o.$e.REDIRECT){const n=(0,o.Gv)();Object.keys(n).length>0&&n._pid&&(a=!0)}i.openloginOptions=h(h({},i.openloginOptions),{},{replaceUrlOnRedirect:a}),i.openloginInstance=new o.ZP(i.openloginOptions),r.cM.debug("initializing openlogin adapter init"),yield i.openloginInstance.init(),i.status=r.MP.READY,i.emit(r.n2.READY,r.rW.OPENLOGIN);try{r.cM.debug("initializing openlogin adapter"),i.openloginInstance.privKey&&(n.autoConnect||a)&&(yield i.connect())}catch(c){r.cM.error("Failed to connect with cached openlogin provider",c),i.emit("ERRORED",c)}})()}connect(n){var e=()=>super.checkConnectionRequirements,i=this;return(0,t.Z)(function*(){e().call(i),i.status=r.MP.CONNECTING,i.emit(r.n2.CONNECTING,h(h({},n),{},{adapter:r.rW.OPENLOGIN}));try{return yield i.connectWithProvider(n),i.provider}catch(t){if(r.cM.error("Failed to connect with openlogin provider",t),i.status=r.MP.READY,i.emit(r.n2.ERRORED,t),null!=t&&t.message.includes("user closed popup"))throw r.RM.popupClosed();throw r.RM.connectionError("Failed to login with openlogin")}})()}disconnect(){var n=arguments,e=this;return(0,t.Z)(function*(){let i=n.length>0&&void 0!==n[0]?n[0]:{cleanup:!1};if(e.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!e.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");yield e.openloginInstance.logout(),i.cleanup?(e.status=r.MP.NOT_READY,e.openloginInstance=null,e.privKeyProvider=null):e.status=r.MP.READY,e.emit(r.n2.DISCONNECTED)})()}getUserInfo(){var n=this;return(0,t.Z)(function*(){if(n.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet");if(!n.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");return yield n.openloginInstance.getUserInfo()})()}setAdapterSettings(n){if(this.status===r.MP.READY)return;const e=p();this.openloginOptions=h(h(h({},e.adapterSettings),this.openloginOptions||{}),n)}setChainConfig(n){super.setChainConfig(n),this.currentChainNamespace=n.chainNamespace}connectWithProvider(n){var e=this;return(0,t.Z)(function*(){if(!e.chainConfig)throw r.Ty.invalidParams("chainConfig is required before initialization");if(!e.openloginInstance)throw r.Ty.notReady("openloginInstance is not ready");if(e.currentChainNamespace===r.EN.SOLANA){const{SolanaPrivateKeyProvider:n}=yield Promise.all([i.e(142),i.e(968)]).then(i.bind(i,10968));e.privKeyProvider=new n({config:{chainConfig:e.chainConfig}})}else if(e.currentChainNamespace===r.EN.EIP155){const{EthereumPrivateKeyProvider:n}=yield Promise.all([i.e(470),i.e(520)]).then(i.bind(i,50520));e.privKeyProvider=new n({config:{chainConfig:e.chainConfig}})}else{if(e.currentChainNamespace!==r.EN.OTHER)throw new Error("Invalid chainNamespace: ".concat(e.currentChainNamespace," found while connecting to wallet"));e.privKeyProvider=new c.FL}var t;!e.openloginInstance.privKey&&n&&(e.loginSettings.curve||(e.loginSettings.curve=e.currentChainNamespace===r.EN.SOLANA?o.x7.ED25519:o.x7.SECP256K1),yield e.openloginInstance.login(l()(e.loginSettings,{loginProvider:n.loginProvider},{extraLoginOptions:h(h({},n.extraLoginOptions||{}),{},{login_hint:n.login_hint||(null===(t=n.extraLoginOptions)||void 0===t?void 0:t.login_hint)})})));let a=e.openloginInstance.privKey;if(a){if(e.currentChainNamespace===r.EN.SOLANA){const{getED25519Key:n}=yield Promise.all([i.e(142),i.e(882)]).then(i.bind(i,74882));a=n(a).sk.toString("hex")}yield e.privKeyProvider.setupProvider(a),e.status=r.MP.CONNECTED,e.emit(r.n2.CONNECTED,{adapter:r.rW.OPENLOGIN,reconnected:!n})}})()}}}}]);