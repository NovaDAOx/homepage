(self.webpackChunkrugs=self.webpackChunkrugs||[]).push([[847],{43847:function(t,e,r){"use strict";r.r(e),r.d(e,{MetamaskAdapter:function(){return c}});var n=r(16304),i=r(5587),a=r(83917),o=r.n(a),s=r(77702);class c extends s.J5{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),(0,i.Z)(this,"adapterNamespace",s.yk.EIP155),(0,i.Z)(this,"currentChainNamespace",s.EN.EIP155),(0,i.Z)(this,"type",s.hN.EXTERNAL),(0,i.Z)(this,"name",s.rW.METAMASK),(0,i.Z)(this,"status",s.MP.NOT_READY),(0,i.Z)(this,"rehydrated",!1),(0,i.Z)(this,"metamaskProvider",null),this.chainConfig=t.chainConfig||null}get provider(){return this.status===s.MP.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}init(t){var e=()=>super.checkInitializationRequirements,r=this;return(0,n.Z)(function*(){if(e().call(r),r.metamaskProvider=yield o()({mustBeMetaMask:!0}),!r.metamaskProvider)throw s.Ty.notInstalled("Metamask extension is not installed");r.status=s.MP.READY,r.emit(s.n2.READY,s.rW.METAMASK);try{s.cM.debug("initializing metamask adapter"),t.autoConnect&&(r.rehydrated=!0,yield r.connect())}catch(n){r.emit(s.n2.ERRORED,n)}})()}setAdapterSettings(t){}connect(){var t=()=>super.checkConnectionRequirements,e=this;return(0,n.Z)(function*(){if(t().call(e),e.chainConfig||(e.chainConfig=(0,s.h2)(s.EN.EIP155,1)),e.status=s.MP.CONNECTING,e.emit(s.n2.CONNECTING,{adapter:s.rW.METAMASK}),!e.metamaskProvider)throw s.RM.notConnectedError("Not able to connect with metamask");try{yield e.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=e.metamaskProvider;if(t!==e.chainConfig.chainId&&(yield e.switchChain(e.chainConfig)),e.status=s.MP.CONNECTED,!e.provider)throw s.RM.notConnectedError("Failed to connect with provider");return e.provider.once("disconnect",()=>{e.disconnect()}),e.emit(s.n2.CONNECTED,{adapter:s.rW.METAMASK,reconnected:e.rehydrated}),e.provider}catch(r){throw e.status=s.MP.READY,e.rehydrated=!1,e.emit(s.n2.ERRORED,r),s.RM.connectionError("Failed to login with metamask wallet")}})()}disconnect(){var t=arguments,e=this;return(0,n.Z)(function*(){var r;let n=t.length>0&&void 0!==t[0]?t[0]:{cleanup:!1};if(e.status!==s.MP.CONNECTED)throw s.RM.disconnectionError("Not connected with wallet");null===(r=e.provider)||void 0===r||r.removeAllListeners(),n.cleanup?(e.status=s.MP.NOT_READY,e.metamaskProvider=null):e.status=s.MP.READY,e.rehydrated=!1,e.emit(s.n2.DISCONNECTED)})()}getUserInfo(){var t=this;return(0,n.Z)(function*(){if(t.status!==s.MP.CONNECTED)throw s.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}})()}switchChain(t){var e=this;return(0,n.Z)(function*(){if(!e.metamaskProvider)throw s.RM.notConnectedError("Not connected with wallet");try{yield e.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(r){if(4902!==r.code)throw r;yield e.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget]}]})}})()}}}}]);